type Customer {
  id: ID
  name: String
  surname: String
  company: String
  emails: [Email]
  age: Int
  type: CustomerType
  orders: [Order]
}
type Order {
  product: String
  price: Int
}
type Email {
  email: String
}
type Product {
  id: ID
  name: String
  price: Int
  stock: Int
}
enum CustomerType {
  BASIC
  PREMIUM
}
type Query {
  getCustomer(id: ID): Customer
  getCustomers(limit: Int, offset: Int): [Customer]
  totalCustomers: Int

  # Products
  getProducts(limit: Int, offset: Int): [Product]
  getProduct(id: ID): Product
  totalProducts: Int
}
input OrderInput {
  product: String
  price: Int
}
input EmailInput {
  email: String
}
""" New Customer fields """
input CustomerInput {
  id: ID
  name: String!
  surname: String!
  company: String!
  emails: [EmailInput]
  age: Int!
  type: CustomerType!
  orders: [OrderInput]
}
""" New Product fields """
input ProductInput {
  id: ID
  name: String!
  price: Int!
  stock: Int!
}
""" Mutations to create new Customers """
type Mutation {
  # resolver's name, input with data and what it returns
  """ Creates a new customer and saves it in database """
  createCustomer(input: CustomerInput): Customer
  updateCustomer(input: CustomerInput): Customer
  deleteCustomer(id: ID!): Boolean
  # Products
  newProduct(input: ProductInput): Product
  updateProduct(input: ProductInput): Product
  deleteProduct(id: ID!): Boolean
}
